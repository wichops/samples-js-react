{"version":3,"sources":["polyfills.js","config.js","Home.jsx","Messages.jsx","Navbar.jsx","Profile.jsx","Server.jsx","App.jsx","registerServiceWorker.js","index.js"],"names":["window","TextEncoder","oidc","clientId","process","issuer","redirectUri","scopes","pkce","disableHttpsCheck","apiUrl","Home","useOktaAuth","authState","authService","useState","userInfo","setUserInfo","useEffect","isAuthenticated","getUser","then","info","login","a","isPending","as","name","href","id","primary","onClick","Messages","messages","setMessages","messageFetchFailed","setMessageFetchFailed","accessToken","fetch","config","headers","Authorization","response","ok","json","Promise","reject","data","index","formattedMessages","map","message","date","Date","day","toLocaleDateString","time","toLocaleTimeString","text","catch","err","console","error","header","list","key","Navbar","logout","fixed","inverted","Item","size","src","Profile","myHeaders","Headers","append","stream","Object","entries","claimEntry","claimName","claimValue","claimId","loading","setLoading","status","setStatus","body","setBody","className","Content","Header","Description","secondary","App","style","marginTop","path","component","Server","LoginCallback","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","ReactDOM","render","document","getElementById","URL","origin","addEventListener","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"sPAIkC,qBAAvBA,OAAOC,cAChBD,OAAOC,YAAcA,e,qCCDR,GACbC,KAAM,CACJC,SANcC,uBAOdC,OANWD,6CAOXE,YAAa,8DACbC,OAAQ,CAAC,SAAU,UAAW,SAC9BC,MAAM,EACNC,kBATmCL,SAWrCM,OAAQ,0C,kCCsFKC,EAnFF,WAAO,IAAD,EACkBC,wBAA3BC,EADS,EACTA,UAAWC,EADF,EACEA,YADF,EAEeC,mBAAS,MAFxB,mBAEVC,EAFU,KAEAC,EAFA,KAIjBC,qBAAU,WACHL,EAAUM,gBAIbL,EAAYM,UAAUC,MAAK,SAACC,GAC1BL,EAAYK,MAHdL,EAAY,QAMb,CAACJ,EAAWC,IAEf,IAAMS,EAAK,uCAAG,sBAAAC,EAAA,sDACZV,EAAYS,MAAM,KADN,2CAAH,qDAKX,OAAIV,EAAUY,UAEV,2CAKF,6BACE,6BACE,kBAAC,IAAD,CAAQC,GAAG,MAAX,uCAEEb,EAAUM,kBAAoBH,GAC7B,4DAEFH,EAAUM,iBAAmBH,GAE9B,6BACE,2CAEGA,EAASW,KAFZ,KAKA,kNAGG,IACD,uBAAGC,KAAK,YAAR,cACC,IALH,4CAQA,mCAEG,IACD,uBAAGA,KAAK,WAAR,eACC,IAJH,qDAUAf,EAAUM,iBAEZ,6BACE,0HACA,2BACE,wEACA,uBAAGS,KAAK,wEAAR,sBACA,8CACA,uBAAGA,KAAK,mEAAR,aACA,wDAEF,wTAIA,kBAAC,IAAD,CAAQC,GAAG,eAAeC,SAAO,EAACC,QAASR,GAA3C,aCmCKS,EA5GE,WAAO,IACdnB,EAAcD,wBAAdC,UADa,EAEWE,mBAAS,MAFpB,mBAEdkB,EAFc,KAEJC,EAFI,OAG+BnB,oBAAS,GAHxC,mBAGdoB,EAHc,KAGMC,EAHN,KAMrBlB,qBAAU,WACR,GAAIL,EAAUM,gBAAiB,CAAC,IACtBkB,EAAgBxB,EAAhBwB,YAERC,MAAMC,EAAO7B,OAAS,gBAAiB,CACrC8B,QAAS,CACPC,cAAc,UAAD,OAAYJ,MAG1BhB,MAAK,SAACqB,GACL,OAAKA,EAASC,GAGPD,EAASE,OAFPC,QAAQC,YAIlBzB,MAAK,SAAC0B,GACL,IAAIC,EAAQ,EACNC,EAAoBF,EAAKG,KAAI,SAACC,GAClC,IAAMC,EAAO,IAAIC,KAAKF,EAAQC,MACxBE,EAAMF,EAAKG,qBACXC,EAAOJ,EAAKK,qBAElB,OADAT,GAAS,EACF,CACLI,KAAK,GAAD,OAAKE,EAAL,YAAYE,GAChBE,KAAMP,EAAQO,KACd7B,GAAG,WAAD,OAAamB,OAGnBd,EAAYe,GACZb,GAAsB,MAEvBuB,OAAM,SAACC,GACNxB,GAAsB,GAEtByB,QAAQC,MAAMF,SAGnB,CAAC/C,IAOJ,OACE,6BACE,kBAAC,IAAD,CAAQa,GAAG,MACT,kBAAC,IAAD,CAAMC,KAAK,iBADb,eAICQ,GAAsB,kBAAC,IAAD,CAAS2B,OAAK,EAACC,OAAO,0DAA0DC,KAXpF,CACrB,wFACA,gJAUI/B,IAAaE,GAAsB,kDACpCF,GAED,6BACE,yHAEE,8DAEF,0EAEG,IACD,+CACC,IAJH,kQASG,IACD,uDAVF,KAaA,8DAEG,IACD,+CACC,IAJH,0IAQA,kBAAC,IAAD,KACE,+BACE,4BACE,oCACA,yCAGJ,+BACGA,EAASiB,KAAI,SAACC,GAAD,OACZ,wBAAItB,GAAIsB,EAAQtB,GAAIoC,IAAKd,EAAQtB,IAC/B,4BAAKsB,EAAQC,MACb,4BAAKD,EAAQO,eCnEdQ,EAhCA,WAAO,IAAD,EACgBtD,wBAA3BC,EADW,EACXA,UAAWC,EADA,EACAA,YAEbS,EAAK,uCAAG,sBAAAC,EAAA,+EAAYV,EAAYS,MAAM,MAA9B,2CAAH,qDACL4C,EAAM,uCAAG,sBAAA3C,EAAA,+EAAYV,EAAYqD,OAAO,MAA/B,2CAAH,qDAEZ,OACE,6BACE,kBAAC,IAAD,CAAMC,MAAM,MAAMC,UAAQ,GACxB,kBAAC,IAAD,KACE,kBAAC,IAAKC,KAAN,CAAW5C,GAAG,IAAIqC,QAAM,EAACnC,KAAK,KAC5B,kBAAC,IAAD,CAAO2C,KAAK,OAAOC,IAAI,eADzB,kCAKC3D,EAAUM,iBACX,kBAAC,IAAKmD,KAAN,CAAWzC,GAAG,kBAAkBH,GAAG,IAAIE,KAAK,aAC1C,kBAAC,IAAD,CAAMD,KAAK,iBADb,YAKA,kBAAC,IAAK2C,KAAN,CAAW5C,GAAG,IAAIE,KAAK,WAAvB,eAGCf,EAAUM,iBAAmB,kBAAC,IAAKmD,KAAN,CAAWzC,GAAG,iBAAiBH,GAAG,IAAIE,KAAK,YAA3C,WAC7Bf,EAAUM,iBAAmB,kBAAC,IAAKmD,KAAN,CAAWzC,GAAG,gBAAgBH,GAAG,IAAIK,QAASoC,GAA9C,WAC5BtD,EAAUY,YAAcZ,EAAUM,iBAAmB,kBAAC,IAAKmD,KAAN,CAAW5C,GAAG,IAAIK,QAASR,GAA3B,aCmDlDkD,EA7EC,WAAO,IAAD,EACe7D,wBAA3BC,EADY,EACZA,UAAWC,EADC,EACDA,YADC,EAEYC,mBAAS,MAFrB,mBAEbC,EAFa,KAEHC,EAFG,KAsBpB,OAlBAC,qBAAU,WACHL,EAAUM,gBAIbL,EAAYM,UAAUC,MAAK,SAACC,GAC1BL,EAAYK,MACXD,MAAK,WACN,IAAMqD,EAAY,IAAIC,QACtBD,EAAUE,OAAO,gBAAjB,iBAA4C/D,EAAUwB,cAEtDC,MAAM,4BAA6B,CAAEE,QAASkC,IAC3CrD,MAAK,SAAAwD,GAAM,OAAIA,EAAOjC,UACtBvB,MAAK,SAAA0B,GAAI,OAAIc,QAAQvC,KAAK,eAAgByB,SAV/C9B,EAAY,QAab,CAACJ,EAAWC,IAEVE,EASH,6BACE,6BACE,kBAAC,IAAD,CAAQU,GAAG,MACT,kBAAC,IAAD,CAAMC,KAAK,4BACV,IAFH,oCAIG,KAEH,4GAEE,uBAAGC,KAAK,mEAAR,aACC,IAHH,uCAMA,8DAEE,+CACC,IAHH,gGAMA,kBAAC,IAAD,KACE,+BACE,4BACE,qCACA,uCAGJ,+BACGkD,OAAOC,QAAQ/D,GAAUkC,KAAI,SAAC8B,GAC7B,IAAMC,EAAYD,EAAW,GACvBE,EAAaF,EAAW,GACxBG,EAAO,gBAAYF,GACzB,OACE,wBAAIhB,IAAKgB,GACP,4BAAKA,GACL,wBAAIpD,GAAIsD,GAAUD,WA1C9B,6BACE,yDCgBOT,EAnDC,WAAO,IACb5D,EAAcD,wBAAdC,UADY,EAEUE,oBAAS,GAFnB,mBAEbqE,EAFa,KAEJC,EAFI,OAGQtE,mBAAS,GAHjB,mBAGbuE,EAHa,KAGLC,EAHK,OAIIxE,mBAAS,MAJb,mBAIbyE,EAJa,KAIPC,EAJO,KAqBpB,OACE,6BACE,6BACE,kBAAC,IAAD,CAAQ/D,GAAG,MAAX,sCAGA,kBAAC,IAAD,CAAQA,GAAG,MACRb,EAAUM,gBAAkB,gBAAkB,sBAGnD,yBAAKuE,UAAU,eACf,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAKC,QAAN,KACE,kBAAC,IAAKC,OAAN,KAAcN,GACZ,kBAAC,IAAKO,YAAN,KACE,8BAAOL,KAGb,kBAAC,IAAKG,QAAN,KACE,kBAAC,IAAD,CAAQG,WAAS,EAACV,QAASA,EAASrD,QAnC3B,WACjBsD,GAAW,GACX,IAAMX,EAAY,IAAIC,QACtBD,EAAUE,OAAO,gBAAjB,iBAA4C/D,EAAUwB,cAEtDC,MAAM,GAAD,OAAIC,EAAO7B,OAAX,WAA4B,CAAE8B,QAASkC,IACzCrD,MAAK,SAACqB,GAGL,OAFA2C,GAAW,GACXE,EAAU7C,EAAS4C,QACZ5C,EAASgB,UAEjBrC,KAAKoE,GACL9B,MAAME,QAAQC,SAuBT,8BCVGiC,EAdH,kBACV,kBAAC,gBAAD,KACE,kBAAC,WAAaxD,EAAOrC,KACnB,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAWwD,MAAI,EAACsC,MAAO,CAAEC,UAAW,QAClC,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWxF,IAC3B,kBAAC,IAAD,CAAOuF,KAAK,UAAUC,UAAWC,IACjC,kBAAC,IAAD,CAAOF,KAAK,qBAAqBC,UAAWE,kBAC5C,kBAAC,cAAD,CAAaH,KAAK,YAAYC,UAAWnE,IACzC,kBAAC,cAAD,CAAakE,KAAK,WAAWC,UAAW1B,QCT1C6B,G,OAAcC,QACW,cAA7BvG,OAAOwG,SAASC,UAEe,UAA7BzG,OAAOwG,SAASC,UAEhBzG,OAAOwG,SAASC,SAASC,MACvB,4DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTvF,MAAK,SAAA2F,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,WAK1BzD,QAAQ0D,IAAI,6CAKZ1D,QAAQ0D,IAAI,4CAMrB5D,OAAM,SAAAG,GACLD,QAAQC,MAAM,4CAA6CA,MC7DjE0D,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDWlC,WACb,GAA6C,kBAAmBd,UAAW,CAGzE,GADkB,IAAIe,IAAIxH,GAAwBJ,OAAOwG,UAC3CqB,SAAW7H,OAAOwG,SAASqB,OAIvC,OAGF7H,OAAO8H,iBAAiB,QAAQ,WAC9B,IAAMlB,EAAK,UAAMxG,GAAN,sBAEPkG,EAwCV,SAAiCM,GAE/BtE,MAAMsE,GACHvF,MAAK,SAAAqB,GAGkB,MAApBA,EAAS4C,SACuD,IAAhE5C,EAASF,QAAQuF,IAAI,gBAAgBC,QAAQ,cAG7CnB,UAAUC,cAAcmB,MAAM5G,MAAK,SAAA2F,GACjCA,EAAakB,aAAa7G,MAAK,WAC7BrB,OAAOwG,SAAS2B,eAKpBxB,EAAgBC,MAGnBjD,OAAM,WACLE,QAAQ0D,IACN,oEA5DAa,CAAwBxB,GAGxBD,EAAgBC,OC7BxByB,K","file":"static/js/main.389f491e.chunk.js","sourcesContent":["// polyfill TextEncoder for IE Edge\nimport { TextEncoder } from 'text-encoding';\n\n/* global window */\nif (typeof window.TextEncoder === 'undefined') {\n  window.TextEncoder = TextEncoder;\n}\n","const CLIENT_ID = process.env.CLIENT_ID || '{clientId}';\nconst ISSUER = process.env.ISSUER || 'https://{yourOktaDomain}.com/oauth2/default';\nconst OKTA_TESTING_DISABLEHTTPSCHECK = process.env.OKTA_TESTING_DISABLEHTTPSCHECK || false;\n\nexport default {\n  oidc: {\n    clientId: CLIENT_ID,\n    issuer: ISSUER,\n    redirectUri: 'https://adoring-joliot-242a3b.netlify.app/implicit/callback',\n    scopes: ['openid', 'profile', 'email'],\n    pkce: true,\n    disableHttpsCheck: OKTA_TESTING_DISABLEHTTPSCHECK,\n  },\n  apiUrl: 'https://dry-cliffs-97591.herokuapp.com',\n};\n","/*\n * Copyright (c) 2018, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { useOktaAuth } from '@okta/okta-react';\nimport React, { useState, useEffect } from 'react';\nimport { Button, Header } from 'semantic-ui-react';\n\nconst Home = () => {\n  const { authState, authService } = useOktaAuth();\n  const [userInfo, setUserInfo] = useState(null);\n\n  useEffect(() => {\n    if (!authState.isAuthenticated) {\n      // When user isn't authenticated, forget any user info\n      setUserInfo(null);\n    } else {\n      authService.getUser().then((info) => {\n        setUserInfo(info);\n      });\n    }\n  }, [authState, authService]); // Update if authState changes\n\n  const login = async () => {\n    authService.login('/');\n  };\n\n\n  if (authState.isPending) {\n    return (\n      <div>Loading...</div>\n    );\n  }\n\n  return (\n    <div>\n      <div>\n        <Header as=\"h1\">PKCE Flow w/ Okta Hosted Login Page</Header>\n\n        { authState.isAuthenticated && !userInfo\n        && <div>Loading user information...</div>}\n\n        {authState.isAuthenticated && userInfo\n        && (\n        <div>\n          <p>\n            Welcome back,\n            {userInfo.name}\n            !\n          </p>\n          <p>\n            You have successfully authenticated against your Okta org, and have been redirected back to this application.  You now have an ID token and access token in local storage.\n            Visit the\n            {' '}\n            <a href=\"/profile\">My Profile</a>\n            {' '}\n            page to take a look inside the ID token.\n          </p>\n          <p>\n            Visit \n            {' '}\n            <a href=\"/server\">Server Test</a>\n            {' '}\n            to test communicating to a secure server route.\n          </p>\n        </div>\n        )}\n\n        {!authState.isAuthenticated\n        && (\n        <div>\n          <p>If you&lsquo;re viewing this page then you have successfully started this React application.</p>\n          <p>\n            <span>This example shows you how to use the </span>\n            <a href=\"https://github.com/okta/okta-oidc-js/tree/master/packages/okta-react\">Okta React Library</a>\n            <span> to add the </span>\n            <a href=\"https://developer.okta.com/docs/guides/implement-auth-code-pkce\">PKCE Flow</a>\n            <span> to your application.</span>\n          </p>\n          <p>\n            When you click the login button below, you will be redirected to the login page on your Okta org.\n            After you authenticate, you will be returned to this application with an ID token and access token.  These tokens will be stored in local storage and can be retrieved at a later time.\n          </p>\n          <Button id=\"login-button\" primary onClick={login}>Login</Button>\n        </div>\n        )}\n\n      </div>\n    </div>\n  );\n};\nexport default Home;\n","/*\n * Copyright (c) 2018, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { useOktaAuth } from '@okta/okta-react';\nimport React, { useState, useEffect } from 'react';\nimport { Header, Icon, Message, Table } from 'semantic-ui-react';\n\nimport config from './config';\n\nconst Messages = () => {\n  const { authState } = useOktaAuth();\n  const [messages, setMessages] = useState(null);\n  const [messageFetchFailed, setMessageFetchFailed] = useState(false);\n\n  // fetch messages\n  useEffect(() => {\n    if (authState.isAuthenticated) {\n      const { accessToken } = authState;\n      /* global fetch */\n      fetch(config.apiUrl + '/api/messages', {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n        },\n      })\n        .then((response) => {\n          if (!response.ok) {\n            return Promise.reject();\n          }\n          return response.json();\n        })\n        .then((data) => {\n          let index = 0;\n          const formattedMessages = data.map((message) => {\n            const date = new Date(message.date);\n            const day = date.toLocaleDateString();\n            const time = date.toLocaleTimeString();\n            index += 1;\n            return {\n              date: `${day} ${time}`,\n              text: message.text,\n              id: `message-${index}`,\n            };\n          });\n          setMessages(formattedMessages);\n          setMessageFetchFailed(false);\n        })\n        .catch((err) => {\n          setMessageFetchFailed(true);\n          /* eslint-disable no-console */\n          console.error(err);\n        });\n    }\n  }, [authState]);\n\n  const possibleErrors = [\n    'You\\'ve downloaded one of our resource server examples, and it\\'s running on port 8000.',\n    'Your resource server example is using the same Okta authorization server (issuer) that you have configured this React application to use.',\n  ];\n\n  return (\n    <div>\n      <Header as=\"h1\">\n        <Icon name=\"mail outline\" />\n        My Messages\n      </Header>\n      {messageFetchFailed && <Message error header=\"Failed to fetch messages.  Please verify the following:\" list={possibleErrors} />}\n      {!messages && !messageFetchFailed && <p>Fetching Messages..</p>}\n      {messages\n      && (\n      <div>\n        <p>\n          This component makes a GET request to the resource server example, which must be running at\n          <code>localhost:8000/api/messages</code>\n        </p>\n        <p>\n          It attaches your current access token in the\n          {' '}\n          <code>Authorization</code>\n          {' '}\n          header on the request,\n          and the resource server will attempt to authenticate this access token.\n          If the token is valid the server will return a list of messages.  If the token is not valid\n          or the resource server is incorrectly configured, you will see a 401\n          {' '}\n          <code>Unauthorized response</code>\n          .\n        </p>\n        <p>\n          This route is protected with the\n          {' '}\n          <code>&lt;SecureRoute&gt;</code>\n          {' '}\n          component, which will\n          ensure that this page cannot be accessed until you have authenticated and have an access token in local storage.\n        </p>\n        <Table>\n          <thead>\n            <tr>\n              <th>Date</th>\n              <th>Message</th>\n            </tr>\n          </thead>\n          <tbody>\n            {messages.map((message) => (\n              <tr id={message.id} key={message.id}>\n                <td>{message.date}</td>\n                <td>{message.text}</td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      </div>\n      )}\n    </div>\n  );\n};\n\nexport default Messages;\n","/*\n * Copyright (c) 2018, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { useOktaAuth } from '@okta/okta-react';\nimport React from 'react';\nimport { Container, Icon, Image, Menu } from 'semantic-ui-react';\n\nconst Navbar = () => {\n  const { authState, authService } = useOktaAuth();\n\n  const login = async () => authService.login('/');\n  const logout = async () => authService.logout('/');\n\n  return (\n    <div>\n      <Menu fixed=\"top\" inverted>\n        <Container>\n          <Menu.Item as=\"a\" header href=\"/\">\n            <Image size=\"mini\" src=\"/react.svg\" />\n            &nbsp;\n            Okta-React Sample Project\n          </Menu.Item>\n          {authState.isAuthenticated && (\n          <Menu.Item id=\"messages-button\" as=\"a\" href=\"/messages\">\n            <Icon name=\"mail outline\" />\n            Messages\n          </Menu.Item>\n          )}\n          <Menu.Item as=\"a\" href=\"/server\">\n            Test Server\n          </Menu.Item>\n          {authState.isAuthenticated && <Menu.Item id=\"profile-button\" as=\"a\" href=\"/profile\">Profile</Menu.Item>}\n          {authState.isAuthenticated && <Menu.Item id=\"logout-button\" as=\"a\" onClick={logout}>Logout</Menu.Item>}\n          {!authState.isPending && !authState.isAuthenticated && <Menu.Item as=\"a\" onClick={login}>Login</Menu.Item>}\n        </Container>\n      </Menu>\n    </div>\n  );\n};\nexport default Navbar;\n","/*\n * Copyright (c) 2018, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { useOktaAuth } from '@okta/okta-react';\nimport { Header, Icon, Table } from 'semantic-ui-react';\n\nconst Profile = () => {\n  const { authState, authService } = useOktaAuth();\n  const [userInfo, setUserInfo] = useState(null);\n\n  useEffect(() => {\n    if (!authState.isAuthenticated) {\n      // When user isn't authenticated, forget any user info\n      setUserInfo(null);\n    } else {\n      authService.getUser().then((info) => {\n        setUserInfo(info);\n      }).then(() => {\n        const myHeaders = new Headers();\n        myHeaders.append('Authorization', `Bearer ${authState.accessToken}`);\n\n        fetch('.netlify/functions/secure', { headers: myHeaders })\n          .then(stream => stream.json())\n          .then(data => console.info('AAH SI O QUE', data))\n      });\n    }\n  }, [authState, authService]); // Update if authState changes\n\n  if (!userInfo) {\n    return (\n      <div>\n        <p>Fetching user profile...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <div>\n        <Header as=\"h1\">\n          <Icon name=\"drivers license outline\" />\n          {' '}\n          My User Profile (ID Token Claims)\n          {' '}\n        </Header>\n        <p>\n          Below is the information from your ID token which was obtained during the &nbsp;\n          <a href=\"https://developer.okta.com/docs/guides/implement-auth-code-pkce\">PKCE Flow</a>\n          {' '}\n          and is now stored in local storage.\n        </p>\n        <p>\n          This route is protected with the\n          <code>&lt;SecureRoute&gt;</code>\n          {' '}\n          component, which will ensure that this page cannot be accessed until you have authenticated.\n        </p>\n        <Table>\n          <thead>\n            <tr>\n              <th>Claim</th>\n              <th>Value</th>\n            </tr>\n          </thead>\n          <tbody>\n            {Object.entries(userInfo).map((claimEntry) => {\n              const claimName = claimEntry[0];\n              const claimValue = claimEntry[1];\n              const claimId = `claim-${claimName}`;\n              return (\n                <tr key={claimName}>\n                  <td>{claimName}</td>\n                  <td id={claimId}>{claimValue}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </Table>\n      </div>\n    </div>\n  );\n};\n\nexport default Profile;\n","import React, { useState } from 'react';\nimport { useOktaAuth } from '@okta/okta-react';\nimport { Header, Card, Button } from 'semantic-ui-react';\n\nimport config from './config';\n\nconst Profile = () => {\n  const { authState } = useOktaAuth();\n  const [loading, setLoading] = useState(false);\n  const [status, setStatus] = useState(0);\n  const [body, setBody] = useState('{}');\n\n  const fetchToken = () => {\n    setLoading(true);\n    const myHeaders = new Headers();\n    myHeaders.append('Authorization', `Bearer ${authState.accessToken}`);\n\n    fetch(`${config.apiUrl}/secure`, { headers: myHeaders })\n      .then((response) => {\n        setLoading(false);\n        setStatus(response.status);\n        return response.text();\n      })\n      .then(setBody)\n      .catch(console.error);\n  };\n\n  return (\n    <div>\n      <div>\n        <Header as=\"h1\">\n          Test your token on the server-side\n        </Header>\n        <Header as=\"h2\">\n          {authState.isAuthenticated ? 'Authenticated' : 'Not Authenticated'}\n        </Header>\n      </div>\n      <div className=\"ui divider\" />\n      <div>\n        <Card>\n          <Card.Content>\n            <Card.Header>{status}</Card.Header>\n              <Card.Description>\n                <code>{body}</code>\n              </Card.Description>\n          </Card.Content>\n          <Card.Content>\n            <Button secondary loading={loading} onClick={fetchToken}>\n              Fetch secure endpoint\n            </Button>\n          </Card.Content>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default Profile;\n","/*\n * Copyright (c) 2018, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { Security, SecureRoute, LoginCallback } from '@okta/okta-react';\nimport { Container } from 'semantic-ui-react';\nimport config from './config';\nimport Home from './Home';\nimport Messages from './Messages';\nimport Navbar from './Navbar';\nimport Profile from './Profile';\nimport Server from './Server';\n\nconst App = () => (\n  <Router>\n    <Security {...config.oidc}>\n      <Navbar />\n      <Container text style={{ marginTop: '7em' }}>\n        <Route path=\"/\" component={Home} />\n        <Route path=\"/server\" component={Server} />\n        <Route path=\"/implicit/callback\" component={LoginCallback} />\n        <SecureRoute path=\"/messages\" component={Messages} />\n        <SecureRoute path=\"/profile\" component={Profile} />\n      </Container>\n    </Security>\n  </Router>\n);\nexport default App;\n","/*\n * Copyright (c) 2018, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n/* eslint-disable */\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/*\n * Copyright (c) 2018, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport './polyfills';\nimport App from './App';\nimport './index.css';\nimport registerServiceWorker from './registerServiceWorker';\n\n/* global document */\n/* eslint-disable react/jsx-filename-extension */\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}